@page "/mongo-load-test"
@inherits MongoLoadTestBase

<h3>MongoDB Replication Load Test</h3>
<h6>Load Test</h6>

@if (Signalr.IsConnected)
{
    <div class="alert alert-success">
        <div class="row">
            <div class="col col-sm-1">
                <button class="btn btn-danger btn-sm" @onclick="async() => await StopAsync()">Disconnect</button>&nbsp;
            </div>
            <div class="col col-sm-11">
                <label><strong>Hub Server URL:</strong> @Signalr.HubUrl</label> |
                <label>@ConnectionInfo</label>
            </div>
        </div>
    </div>
}
else
{
    <div class="alert alert-dark">
        <div class="row">
            <div class="col col-sm-1">
                <button class="btn btn-success btn-sm" @onclick="async() => await StartAsync()">Connect</button>&nbsp;
            </div>
            <div class="col col-sm11">
                <label><strong>Hub Server URL:</strong> @Signalr.HubUrl</label>
            </div>
        </div>
    </div>
}

<hr />

<div hidden="@ContentDivHidden()">
    <div class="row">
        <div class="col">
            <div class="card">
                <div class="card-header">
                    <label>Mongo settings</label>
                </div>
                <div class="card-body">
                    <label>&nbsp;</label>
                    <div class="col-sm-10">
                        <button class="btn btn-success" @onclick="async() => await GetMongoSettingsAsync()">Get Settings</button>
                        <button class="btn btn-outline-secondary" @onclick="() => ClearMongoSettings()">Clear</button>
                        <br />
                        <br />
                        @MongoSettings
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <label>Count all SMS</label>
                </div>
                <div class="card-body">
                    <label>&nbsp;</label>
                    <div class="col-sm-10">
                        <button class="btn btn-success" @onclick="async() => await CountAllSmsAsync()">Count</button>
                        <button class="btn btn-outline-secondary" @onclick="() => Clear1()">Clear</button>
                        &nbsp;&nbsp;@Result1
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <label>Get SMS by Message ID</label>
                </div>
                <div class="card-body">
                    <label>Message ID</label>
                    <div class="col">
                        <div class="input-group">
                            <input type="text" class="form-control" @bind="MsgId" />
                            <button class="btn btn-success" @onclick="async() => await CheckSmsExistAsync()">Check</button>
                        </div>
                        <br />
                        <br />
                        @Result2
                    </div>
                </div>
            </div>
        </div>
    </div>

    <br />

    <div class="card">
        <div class="card-header">
            <label>Stream all SMS</label>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-sm-6">
                    <label>Delay in millisecond per result</label>
                    <select class="form-select" @bind="DelayMs">
                        <option value="2000">2 second</option>
                        <option value="1000">1 second</option>
                        <option value="500">1/2 second</option>
                        <option value="100">1/10 second</option>
                        <option value="10">1/100 second</option>
                        <option value="1">1/1000 second</option>
                        <option value="0">Unlimited</option>
                    </select>
                </div>
                <div class="col-sm-4">
                    <label>&nbsp;</label>
                    @if (IsStreamingStarted)
                    {
                        <div class="input-group">
                            <button class="btn btn-outline-success" @onclick="async() => await SetStreamingDelayAsync()">Set Delay</button>
                            <button class="btn btn-danger" @onclick="() => StopStreaming()">Stop Streaming</button>
                        </div>
                    }
                    else
                    {
                        <div class="input-group">
                            <button class="btn btn-outline-success" @onclick="async() => await SetStreamingDelayAsync()">Set Delay</button>
                            <button class="btn btn-success" @onclick="async () => await StartStreamingAsync()">Start Streaming</button>
                        </div>
                    }
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-sm-12">
                    @if (IsStreamingStarted)
                    {
                        <div class="alert alert-info">
                            Streaming data is logged in console log. Please view the console log for details<br />
                            <strong>Speed:</strong> @Tps data/sec
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-secondary">
                            Streaming data is logged in console log. Please view the console log for details
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private bool ContentDivHidden()
    {
        return Signalr.IsConnected ? false : true;
    }
}
